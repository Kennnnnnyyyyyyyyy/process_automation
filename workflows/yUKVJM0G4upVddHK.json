{"createdAt":"2025-09-25T13:02:31.069Z","updatedAt":"2025-10-06T06:31:51.000Z","id":"yUKVJM0G4upVddHK","name":"Meeting Schedular","active":false,"isArchived":false,"nodes":[{"parameters":{"httpMethod":"POST","path":"schedule-meeting","responseMode":"responseNode","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2.1,"position":[0,0],"id":"a994341d-bc7b-4a5d-9447-f1d8c26ab33f","name":"Webhook","webhookId":"8d062664-5efa-45f4-a85d-3dae789a7583"},{"parameters":{"jsCode":"// ---- Read & validate input ----\nconst b = $json.body || {};\nconst required = [\"title\", \"start\", \"durationMinutes\", \"attendees\", \"organizerEmail\"];\nconst missing = required.filter(k => b[k] == null || (Array.isArray(b[k]) && b[k].length === 0));\nif (missing.length) {\n  return [{\n    json: { isValid: false, missing }\n  }];\n}\n\n// ---- Time handling (assume IST if no offset provided) ----\nlet startStr = String(b.start);\nif (!(/[zZ]|[+\\-]\\d{2}:\\d{2}$/.test(startStr))) {\n  // no timezone provided â†’ assume IST\n  startStr += \"+05:30\";\n}\nconst start = new Date(startStr);\nconst durationMin = Number(b.durationMinutes) || 30;\nconst end = new Date(start.getTime() + durationMin * 60000);\n\n// ---- Helpers ----\nconst pad = n => String(n).padStart(2, \"0\");\nconst toICSTime = (d) => {\n  // UTC \"YYYYMMDDTHHMMSSZ\"\n  const iso = d.toISOString(); // e.g., 2025-10-05T09:30:00.000Z\n  return iso.replace(/[-:]/g, \"\").replace(/\\.\\d{3}Z$/, \"Z\"); // 20251005T093000Z\n};\nconst now = new Date();\nconst dtstamp = toICSTime(now);\nconst dtstart = toICSTime(start);\nconst dtend = toICSTime(end);\n\n// Escape text for ICS (commas/semicolons/newlines)\nconst esc = (s) => String(s || \"\")\n  .replace(/\\\\/g, \"\\\\\\\\\")\n  .replace(/;/g, \"\\\\;\")\n  .replace(/,/g, \"\\\\,\")\n  .replace(/\\r?\\n/g, \"\\\\n\");\n\n// ---- Build ICS ----\nconst uid = `${Date.now()}-${Math.random().toString(36).slice(2)}@n8n.local`;\nconst title = b.title || \"Meeting\";\nconst description = b.description || \"\";\nconst location = b.location || \"\";\n\nlet attendees = Array.isArray(b.attendees) ? b.attendees : [];\nattendees = attendees.filter(a => !!a);\n\nconst lines = [\n  \"BEGIN:VCALENDAR\",\n  \"PRODID:-//Office Demo//Meeting Scheduler//EN\",\n  \"VERSION:2.0\",\n  \"CALSCALE:GREGORIAN\",\n  \"METHOD:REQUEST\",\n  \"BEGIN:VEVENT\",\n  `UID:${uid}`,\n  `DTSTAMP:${dtstamp}`,\n  `DTSTART:${dtstart}`,\n  `DTEND:${dtend}`,\n  `SUMMARY:${esc(title)}`,\n  `DESCRIPTION:${esc(description)}`,\n  `LOCATION:${esc(location)}`,\n  `ORGANIZER:mailto:${b.organizerEmail}`\n];\n\nfor (const a of attendees) {\n  lines.push(`ATTENDEE:mailto:${a}`);\n}\n\nlines.push(\"END:VEVENT\", \"END:VCALENDAR\");\n\nconst ics = lines.join(\"\\r\\n\");\n\n// ---- Return email-friendly data + binary .ics ----\nconst subject = `Invitation: ${title} (${durationMin} min)`;\nconst humanStart = start.toLocaleString(\"en-IN\", { timeZone: \"Asia/Kolkata\" });\n\nconst bodyHtml = `\n<p>Hi,</p>\n<p>You are invited to <b>${esc(title)}</b>.</p>\n<ul>\n  <li><b>When:</b> ${humanStart} IST</li>\n  <li><b>Duration:</b> ${durationMin} minutes</li>\n  <li><b>Location:</b> ${esc(location) || \"TBA\"}</li>\n</ul>\n<p>${esc(description)}</p>\n<p>Regards,<br/>Meeting Scheduler</p>\n`;\n\nreturn [{\n  json: {\n    isValid: true,\n    subject,\n    bodyHtml,\n    attendees,\n    normalized: {\n      title, startISO: start.toISOString(), durationMin, location, description\n    }\n  },\n  binary: {\n    invite: {\n      data: Buffer.from(ics, \"utf8\").toString(\"base64\"),\n      fileName: \"meeting.ics\",\n      mimeType: \"text/calendar; method=REQUEST; charset=UTF-8\"\n    }\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[208,0],"id":"dc7e7e94-437c-45bf-80ad-0b6a89fc6dde","name":"Code in JavaScript"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"499c078b-7c35-4b7d-835a-af5789ac5df9","leftValue":"={{$json.isValid}}","rightValue":true,"operator":{"type":"boolean","operation":"equals"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[416,0],"id":"cfb5fd6e-4db9-44b0-a846-860ba5bccdf7","name":"If"},{"parameters":{"sendTo":"={{$json.attendees.join(\",\")}}","subject":"={{$json.subject}}","message":"={{$json.bodyHtml}}","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[624,-112],"id":"8da5ed4a-569a-40ca-9bec-34f49e56bcf3","name":"Send a message","webhookId":"3983a96e-07d8-48dd-9176-8bbe5658ced6","credentials":{"gmailOAuth2":{"id":"O5GsiCBNfDlTn54Z","name":"Gmail account"}}},{"parameters":{"respondWith":"json","responseBody":"={{ { status: \"ok\", message: \"Invite sent\", data: $json.normalized } }}","options":{"responseCode":200}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[848,-48],"id":"a8203944-401c-4076-9c3c-327fbad0ef21","name":"Respond to Webhook"},{"parameters":{"sendTo":"={{ $json.organizerEmail || \"youremail@gmail.com\" }}","subject":"={{ `Action required: Meeting request incomplete` }}","message":"={{ ` <p>Hello,</p>  <p>Your meeting request could not be scheduled because some required fields are missing.</p>  <p><b>Missing fields:</b> ${($json.missing || []).join(\", \")}</p>  <p>Please resubmit your meeting request including all the required details (title, start, durationMinutes, attendees, organizerEmail).</p>  <p>Thanks,<br/>Office Meeting Scheduler</p> ` }}","options":{}},"type":"n8n-nodes-base.gmail","typeVersion":2.1,"position":[624,96],"id":"6966e6a9-b10e-4aa5-b0c5-9558f8ca3bbd","name":"Send a message1","webhookId":"6b3054dc-ba24-48f2-ac9b-5435a92c97c6","credentials":{"gmailOAuth2":{"id":"O5GsiCBNfDlTn54Z","name":"Gmail account"}}},{"parameters":{"respondWith":"json","responseBody":"={{ { status: \"error\", message: \"Missing required fields\", missing: $json.missing } }}","options":{"responseCode":400}},"type":"n8n-nodes-base.respondToWebhook","typeVersion":1.4,"position":[848,96],"id":"819779ba-5f60-4c2a-92f4-e037c1d0a3ed","name":"Respond to Webhook1"}],"connections":{"Webhook":{"main":[[{"node":"Code in JavaScript","type":"main","index":0}]]},"Code in JavaScript":{"main":[[{"node":"If","type":"main","index":0}]]},"If":{"main":[[{"node":"Send a message","type":"main","index":0}],[{"node":"Send a message1","type":"main","index":0}]]},"Send a message":{"main":[[{"node":"Respond to Webhook","type":"main","index":0}]]},"Send a message1":{"main":[[{"node":"Respond to Webhook1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"a21447ef-95a2-4225-b0a6-23a86c6e1eac","triggerCount":1,"tags":[],"shared":[{"createdAt":"2025-09-25T13:02:31.073Z","updatedAt":"2025-09-25T13:02:31.073Z","role":"workflow:owner","workflowId":"yUKVJM0G4upVddHK","projectId":"usr9sRWbH5Gm8xl8","project":{"createdAt":"2025-09-25T06:39:43.266Z","updatedAt":"2025-10-04T05:46:06.787Z","id":"usr9sRWbH5Gm8xl8","name":"Kenny s <suzaan.shan123@gmail.com>","type":"personal","icon":null,"description":null}}]}